{"version":3,"sources":["components/FormDisplay.jsx","components/Card.jsx","components/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["FormDisplay","withScriptjs","props","react_default","a","createElement","className","onSubmit","handleSubmit","onChange","handleChange","type","name","placeholder","react_google_autocomplete_default","style","width","paddingLeft","marginTop","onPlaceSelected","types","Cards","Grid_default","item","margin","index_es","e","venue","fontSize","fontWeight","location","address","URL","Form","state","info","results","field","target","value","_this","setState","preventDefault","place","lat","axios","post","then","res","data","catch","console","log","geometry","lng","this","components_FormDisplay","googleMapURL","loadingElement","height","container","spacing","marginLeft","length","map","i","Card","key","Component","App","src_components_Form","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e5333ae.chunk.js","sourcesContent":["import React from 'react';\nimport {withScriptjs} from \"react-google-maps\"\nimport Autocomplete from 'react-google-autocomplete';\n\nconst FormDisplay = withScriptjs((props) => {\n\n  return (\n    <div className='formDiv'>\n      <h1>Busca el tipo de comida o restaurant que deseas</h1>\n      <form onSubmit={props.handleSubmit}>\n        <input onChange={props.handleChange} type='text' name='place' placeholder='Ingresa el tipo de comida o restaurant aqui'/>\n        <Autocomplete\n        style={{\n        width: '40%',\n        paddingLeft: '15px',\n        marginTop: '2px'\n       }}\n       onPlaceSelected={ props.onPlaceSelected }\n       types={['address']}\n      />\n        <button type='submit'>Buscar</button>\n      </form>\n    </div>\n  );\n}\n)\n\nexport default FormDisplay;\n","import React from 'react';\nimport {Card,CardContent} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid'\n\nconst Cards = (props) => {\n  return (\n    <Grid item className='Card' style={{margin:10}}>\n      <Card>\n      <CardContent>\n        <h4>{props.e.venue.name}</h4>\n        <p style={{fontSize:'.8rem', fontWeight:'400'}}>{props.e.venue.location.address}</p>\n      </CardContent>\n      </Card>\n    </Grid>\n  );\n}\n\nexport default Cards;\n","import React, { Component } from 'react';\nimport FormDisplay from './FormDisplay'\nimport './Form.css'\nimport axios from 'axios'\nimport Card from './Card'\nimport Grid from '@material-ui/core/Grid'\n\nconst URL = 'http://localhost:3000/getVenues'\n\nclass Form extends Component {\n\n  state={\n    info:{},\n    results:[]\n  }\n\n  handleChange=(e)=>{\n    const field = e.target.name\n    const value = e.target.value\n    const {info} = this.state\n    info[field]=value\n    this.setState({info})\n  }\n\n  handleSubmit=(e)=>{\n    e.preventDefault()\n    const {info} = this.state\n    if(!info.place || !info.lat)return  \n    axios.post(URL,info)\n    .then(res=>{\n      this.setState({results:res.data})\n    })\n    .catch(e=>console.log(e))\n  }\n\n  onPlaceSelected = ( place ) => {\n    const lat= place.geometry.location.lat()\n    const lng= place.geometry.location.lng()\n    const {info} = this.state\n    info['lat']=lat\n    info['lng']=lng\n    console.log(info)\n    this.setState({info:info})\n  }\n\n  render() {\n    const {results} = this.state\n    return (\n      <div className='mainDiv'>\n        <FormDisplay\n        handleSubmit={this.handleSubmit}\n        handleChange={this.handleChange}\n        onPlaceSelected={this.onPlaceSelected}\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?key=AIzaSyAZQpJSxUACY_4AsB78DHFeoZL43X-Refc&v=3.exp&libraries=geometry,drawing,places`}\n        loadingElement={<div style={{ height: `100%` }} />}\n        />\n        <Grid container spacing={16} style={{marginTop:40,width:'90%',marginLeft:'5%'}}>\n        {results.length!==0?results.map((e,i)=><Card key={i} e={e}/>):''} \n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport Form from './components/Form'\n\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div>\n        <Form/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}